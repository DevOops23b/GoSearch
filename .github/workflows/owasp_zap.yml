name: OWASP ZAP scan

on:
  push:
  
  pull_request:
  
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  security-events: write

jobs:
  owasp-zap:
    runs-on: ubuntu-latest

    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
        ports:
          - 9200:9200
        env:
          discovery.type: single-node
          xpack.security.enabled: false
        options: >-
          --health-cmd="curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      
      postgres:
        image: postgres@sha256:f89a36ed5069cee5125bb9ddec623f26989792560eae9a06f767c87ba117cb6d
        env:
          POSTGRES_USER: ${{ secrets.DB_USER_LOCAL }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD_LOCAL }}
          POSTGRES_DB: ${{ secrets.DB_NAME_LOCAL }}
          POSTGRES_HOST: ${{ secrets.DB_HOST_LOCAL }}
          POSTGRES_PORT: ${{ secrets.DB_PORT_LOCAL }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Set up docker-compose
        run: |
          cd ../..
          docker-compose -f docker-compose.dev.yml up -d --build
      
      - name: Set environment variables for Elasticsearch
        run: |
          echo "ES_HOST=localhost" >> $GITHUB_ENV
          echo "ES_USERNAME=elastic" >> $GITHUB_ENV
          echo "ES_PASSWORD=changeme" >> $GITHUB_ENV

      - name: Set CONN_STR from secrets
        run: |
          echo "CONN_STR=host=${{ secrets.DB_HOST_LOCAL }} port=${{ secrets.DB_PORT_LOCAL }} user=${{ secrets.DB_USER_LOCAL }} password=${{ secrets.DB_PASSWORD_LOCAL }} dbname=${{ secrets.DB_NAME_LOCAL }} sslmode=disable" >> $GITHUB_ENV

      - name: Wait for the application to start
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8081/ >/dev/null; then
              echo "App is running!"
              break
            else
              echo "Waiting for app to start..."
              sleep 5
            fi
          done
      
      - name: owasp zap scan
        run: |
          docker run --rm \
            -v $(pwd):/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py -t http://localhost:8081 -a -r zap-report.html
      
      - name: Upload report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: owasp-zap-report
          path: zap-report.html
